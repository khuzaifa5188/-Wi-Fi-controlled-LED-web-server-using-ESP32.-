def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    if y != 0:
        return x / y
    else:
        return "Cannot divide by zero!"

# Main program
print("Select operation:")
print("1. Add")
print("2. Subtract")
print("3. Multiply")
print("4. Divide")

choice = input("Enter choice (1/2/3/4): ")

num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))

if choice == '1':
    print("Result:", add(num1, num2))
elif choice == '2':
    print("Result:", subtract(num1, num2))
elif choice == '3':
    print("Result:", multiply(num1, num2))
elif choice == '4':
    print("Result:", divide(num1, num2))
else:
    print("Invalid input")
//Gui caluculator
import tkinter as tk

def click(event):
    global expression
    expression += str(event.widget.cget("text"))
    input_text.set(expression)

def clear():
    global expression
    expression = ""
    input_text.set("")

def calculate():
    global expression
    try:
        result = str(eval(expression))
        input_text.set(result)
        expression = result
    except:
        input_text.set("Error")
        expression = ""

# Main window
root = tk.Tk()
root.title("Simple Calculator")
root.geometry("300x400")

expression = ""
input_text = tk.StringVar()

# Entry widget
input_frame = tk.Frame(root)
input_frame.pack()

input_field = tk.Entry(input_frame, textvariable=input_text, font=('arial',18,'bold'), bd=10, insertwidth=2, width=14, borderwidth=4)
input_field.grid(row=0, column=0)
input_field.pack(ipady=10)

# Buttons
btns_frame = tk.Frame(root)
btns_frame.pack()

buttons = [
    ['7', '8', '9', '/'],
    ['4', '5', '6', '*'],
    ['1', '2', '3', '-'],
    ['0', '.', '=', '+']
]

for row in buttons:
    btn_row = tk.Frame(btns_frame)
    btn_row.pack(expand=True, fill='both')
    for btn_text in row:
        btn = tk.Button(btn_row, text=btn_text, font=('arial',18,'bold'), height=2, width=4)
        btn.pack(side='left', expand=True, fill='both')
        if btn_text == "=":
            btn.config(command=calculate)
        elif btn_text == "C":
            btn.config(command=clear)
        else:
            btn.bind("<Button-1>", click)

# Add clear button separately
clear_btn = tk.Button(root, text="C", font=('arial',18,'bold'), height=2, width=12, command=clear)
clear_btn.pack(expand=True, fill='both')

root.mainloop()
//scientific calculator
import tkinter as tk
import math

def click(event):
    global expression
    text = event.widget.cget("text")
    if text == "=":
        try:
            result = str(eval(expression))
            input_text.set(result)
            expression = result
        except:
            input_text.set("Error")
            expression = ""
    elif text == "C":
        expression = ""
        input_text.set("")
    elif text in ("sin", "cos", "tan", "sqrt"):
        try:
            if text == "sin":
                result = str(math.sin(math.radians(float(expression))))
            elif text == "cos":
                result = str(math.cos(math.radians(float(expression))))
            elif text == "tan":
                result = str(math.tan(math.radians(float(expression))))
            elif text == "sqrt":
                result = str(math.sqrt(float(expression)))
            input_text.set(result)
            expression = result
        except:
            input_text.set("Error")
            expression = ""
    else:
        expression += text
        input_text.set(expression)

# Main window
root = tk.Tk()
root.title("Scientific Calculator")
root.geometry("350x500")
root.configure(bg="lightgray")

expression = ""
input_text = tk.StringVar()

# Entry
entry = tk.Entry(root, textvariable=input_text, font=('arial',20,'bold'), bd=10, insertwidth=2, width=15, borderwidth=4, relief='ridge', justify='right')
entry.pack(pady=20, padx=10)

# Buttons
buttons = [
    ['7','8','9','/'],
    ['4','5','6','*'],
    ['1','2','3','-'],
    ['0','.','=','+'],
    ['sin','cos','tan','sqrt'],
    ['C']
]

for row in buttons:
    btn_row = tk.Frame(root, bg="lightgray")
    btn_row.pack(expand=True, fill='both')
    for btn_text in row:
        btn = tk.Button(btn_row, text=btn_text, font=('arial',16,'bold'), height=2, width=6, relief='groove')
        btn.pack(side='left', expand=True, fill='both', padx=2, pady=2)
        btn.bind("<Button-1>", click)

root.mainloop()
\\speech recognization 
import speech_recognition as sr
import pyttsx3

# Initialize recognizer and engine
recognizer = sr.Recognizer()
engine = pyttsx3.init()

def speak(text):
    engine.say(text)
    engine.runAndWait()

def listen():
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)  # better accuracy
        audio = recognizer.listen(source)
        try:
            print("Recognizing...")
            command = recognizer.recognize_google(audio)
            print(f"You said: {command}")
            return command.lower()
        except sr.UnknownValueError:
            print("Sorry, I could not understand.")
            speak("Sorry, I could not understand.")
        except sr.RequestError:
            print("Network error.")
            speak("Network error.")
    return ""

# Main loop
while True:
    command = listen()
    if "hello" in command:
        speak("Hello! How can I help you?")
    elif "your name" in command:
        speak("I am your Python voice assistant.")
    elif "stop" in command or "exit" in command:
        speak("Goodbye!")
        break
    elif command:
        speak("You said " + command)
//Face detection code
import cv2

# Load the pre-trained Haar cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Start video capture from your webcam
cap = cv2.VideoCapture(0)

while True:
    # Read each frame
    ret, frame = cap.read()
    if not ret:
        break

    # Convert to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    # Draw rectangles around faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x,y), (x+w, y+h), (0,255,0), 2)

    # Show the output
    cv2.imshow('Face Detection', frame)

    # Exit on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
//WhatsApp auto-messenge
import pywhatkit

# Parameters:
# phone number with country code
phone = "+923001234567"  # replace with your target number

# message to send
message = "Hello from Python! ðŸš€"

# time in 24-hour format
hour = 15  # means 3 PM
minute = 30

# send the message
pywhatkit.sendwhatmsg(phone, message, hour, minute)

print("Message scheduled successfully!")

import pyttsx3
import random
import string
import matplotlib.pyplot as plt
import qrcode
import time

def text_to_speech():
    engine = pyttsx3.init()
    text = input("Enter text to speak: ")
    engine.say(text)
    engine.runAndWait()

def generate_password():
    length = int(input("Enter password length: "))
    password = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))
    print("Generated password:", password)

def plot_graph():
    x = [1, 2, 3, 4, 5]
    y = [10, 14, 18, 21, 27]
    plt.plot(x, y, marker='o')
    plt.title("Simple Line Graph")
    plt.xlabel("X-axis")
    plt.ylabel("Y-axis")
    plt.grid()
    plt.show()

def create_qr():
    data = input("Enter data or URL to encode in QR: ")
    qr = qrcode.make(data)
    filename = input("Enter filename to save (like myqr.png): ")
    qr.save(filename)
    print(f"QR code saved as {filename}")

def countdown_timer():
    seconds = int(input("Enter countdown time in seconds: "))
    for i in range(seconds, 0, -1):
        print(f"Countdown: {i}")
        time.sleep(1)
    print("Time's up!")

def main_menu():
    while True:
        print("\n==== Python Multi-Tool ====")
        print("1. Text to Speech")
        print("2. Generate Random Password")
        print("3. Plot a Simple Graph")
        print("4. Generate QR Code")
        print("5. Countdown Timer")
        print("6. Exit")
        choice = input("Enter choice (1-6): ")
        
        if choice == '1':
            text_to_speech()
        elif choice == '2':
            generate_password()
        elif choice == '3':
            plot_graph()
        elif choice == '4':
            create_qr()
        elif choice == '5':
            countdown_timer()
        elif choice == '6':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Try again.")

# Run the program
main_menu()
//small GUI game 
import random

def guessing_game():
    number_to_guess = random.randint(1, 100)
    attempts = 0

    print("Welcome to the Number Guessing Game!")
    print("I'm thinking of a number between 1 and 100.")

    while True:
        guess = input("Take a guess: ")
        
        # Check if input is a valid integer
        if not guess.isdigit():
            print("Please enter a valid number.")
            continue

        guess = int(guess)
        attempts += 1

        if guess < number_to_guess:
            print("Too low! Try again.")
        elif guess > number_to_guess:
            print("Too high! Try again.")
        else:
            print(f"Congratulations! You guessed it in {attempts} attempts.")
            break

# Run the game
guessing_game()
